{"ast":null,"code":"var _jsxFileName = \"C:\\\\jazroprogrammingtest\\\\src\\\\components\\\\Countries.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Filter from './Filter';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst url = 'https://restcountries.com/v3.1/all';\nconst Countries = () => {\n  _s();\n  const [countries, setCountries] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(''); //state to hold search query\n  const [selectedRegion, setSelectedRegion] = useState('');\n  // const [favorites, setFavorites] = useState([]);\n\n  //fetch data from rest countries API\n  const fetchCountryData = async () => {\n    const response = await fetch(url);\n    const countries = await response.json();\n    setCountries(countries);\n    console.log(countries);\n  };\n  useEffect(() => {\n    fetchCountryData();\n    // setFavorites(JSON.parse(localStorage.getItem('favorites')) || []);  // Load favorites from localStorage when the component mounts\n  }, []);\n\n  // Filter countries based on the search query\n  const filteredCountries = countries.filter(country => {\n    const matchesSearch = country.name.common.toLowerCase().includes(searchQuery.toLowerCase()) || country.capital && country.capital[0].toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesRegion = selectedRegion === '' || country.region === selectedRegion;\n    return matchesSearch && matchesRegion;\n  });\n\n  //call and load database from rest countries API\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Filter, {\n      selectedRegion: selectedRegion,\n      setSelectedRegion: setSelectedRegion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search\",\n        value: searchQuery,\n        onChange: e => setSearchQuery(e.target.value) // Update search query on input change\n        // style={{ margin: '20px', padding: '10px', fontSize: '16px'}}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"country-container\",\n      children: filteredCountries.map(country => {\n        const {\n          name,\n          population,\n          region,\n          capital,\n          flags\n        } = country;\n        return /*#__PURE__*/_jsxDEV(\"article\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: flags.png,\n              alt: name.common\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"details\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: name.common\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: [\"Population: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: population\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: [\"Region: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: region\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: [\"Capital: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: capital\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 34\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, name.common, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 16\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n// const handleFavoriteClick = (country) => {\n//     let updatedFavorites;\n//     if (favorites.some(fav => fav.name.common === country.name.common)) {\n//       updatedFavorites = favorites.filter(fav => fav.name.common !== country.name.common);\n//     } else {\n//       updatedFavorites = [...favorites, country];\n//     }\n//     setFavorites(updatedFavorites);\n//     localStorage.setItem('favorites', JSON.stringify(updatedFavorites));\n//   };\n\n//   const isFavorite = (country) => favorites.some(fav => fav.name.common === country.name.common);\n_s(Countries, \"8u9/pdRs6S4qR6PpPsHoTOlVTsg=\");\n_c = Countries;\nexport default Countries;\nvar _c;\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"names":["React","useState","useEffect","Filter","jsxDEV","_jsxDEV","Fragment","_Fragment","url","Countries","_s","countries","setCountries","searchQuery","setSearchQuery","selectedRegion","setSelectedRegion","fetchCountryData","response","fetch","json","console","log","filteredCountries","filter","country","matchesSearch","name","common","toLowerCase","includes","capital","matchesRegion","region","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","value","onChange","e","target","map","population","flags","src","png","alt","_c","$RefreshReg$"],"sources":["C:/jazroprogrammingtest/src/components/Countries.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport Filter from './Filter'\r\n\r\nconst url = 'https://restcountries.com/v3.1/all'\r\n\r\nconst Countries = () => {\r\n    const [countries, setCountries] = useState([])\r\n    const [searchQuery, setSearchQuery] = useState(''); //state to hold search query\r\n    const [selectedRegion, setSelectedRegion] = useState('');\r\n    // const [favorites, setFavorites] = useState([]);\r\n\r\n//fetch data from rest countries API\r\n    const fetchCountryData = async() => {\r\n        const response = await fetch(url)\r\n        const countries = await response.json()\r\n        setCountries(countries)\r\n        console.log(countries)\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchCountryData()\r\n        // setFavorites(JSON.parse(localStorage.getItem('favorites')) || []);  // Load favorites from localStorage when the component mounts\r\n    }, [])\r\n\r\n// Filter countries based on the search query\r\nconst filteredCountries = countries.filter((country) => {\r\n    const matchesSearch = country.name.common.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      (country.capital && country.capital[0].toLowerCase().includes(searchQuery.toLowerCase()));\r\n    \r\n    const matchesRegion = selectedRegion === '' || country.region === selectedRegion;\r\n    return matchesSearch && matchesRegion;\r\n  });\r\n\r\n//call and load database from rest countries API\r\n  return (\r\n    <>\r\n    {/* Pass selectedRegion and setSelectedRegion to Filter component */}\r\n    <Filter\r\n        selectedRegion={selectedRegion}\r\n        setSelectedRegion={setSelectedRegion}\r\n      />\r\n     <div className='search-container'>\r\n        <input\r\n            type=\"text\"\r\n            placeholder=\"Search\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)} // Update search query on input change\r\n                // style={{ margin: '20px', padding: '10px', fontSize: '16px'}}\r\n        />\r\n    </div>\r\n    <section className='country-container'>\r\n    {filteredCountries.map((country) => {\r\n        const {name, population, region, capital, flags} = country\r\n\r\n        return <article key = {name.common}>\r\n            <div>\r\n                <img src={flags.png} alt={name.common} />\r\n                <div className='details'>\r\n                    <h3>{name.common}</h3>\r\n                    <h4>Population: <span>{population}</span></h4>\r\n                    <h4>Region: <span>{region}</span></h4>\r\n                    <h4>Capital: <span>{capital}</span></h4>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    })}\r\n    </section>\r\n    </>\r\n  )\r\n}\r\n\r\n// const handleFavoriteClick = (country) => {\r\n//     let updatedFavorites;\r\n//     if (favorites.some(fav => fav.name.common === country.name.common)) {\r\n//       updatedFavorites = favorites.filter(fav => fav.name.common !== country.name.common);\r\n//     } else {\r\n//       updatedFavorites = [...favorites, country];\r\n//     }\r\n//     setFavorites(updatedFavorites);\r\n//     localStorage.setItem('favorites', JSON.stringify(updatedFavorites));\r\n//   };\r\n\r\n//   const isFavorite = (country) => favorites.some(fav => fav.name.common === country.name.common);\r\n\r\nexport default Countries"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}